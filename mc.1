.TH MC 1 mc\-VERSION
.SH NAME
.B mc
\- perform arithmetic, bitwise and logical operations
.SH SYNOPSIS
.B mc
[
.B \-hnpal
]
[
.B \-o
.RB [ dbBoOxX ]
]
[
.B \-e
.I expression
]
[
.IR expression ...
]
.SH DESCRIPTION
.B mc
is an integer calculator,
capable of performing arithmetic,
bitwise,
and logical operations.
.SH OPTIONS
.SS Program information
.TP
.B \-h
print help message.
.SS Input\-output control and formatting
.TP
.B \-n
number lines of output with number of corresponding input expression.
.TP
.B \-p
print corresponding input expression of output.
.TP
.B \-a
accumulate result of each expression.
.TP
.B \-l
only print final result (option only has effect when used with
.BR \-a )
.TP
.BR \-o " [" dbBoOxX ]
specify output format as:
decimal,
binary with leading 0[bB],
octal with leading 0[oO],
hexadecimal with leading 0[xX].
.IP
The decimal output is signed,
all other bases are unsigned.
.SS Input sources
.TP
.RB [ \-e ] " expression"
takes a quoted expression to be evaluated.
.IP
If no expressions are given then mc reads from
stdin.
.SH NUMERICAL INPUT/OUTPUT FORMATS
.B mc
can read and output numbers in formats other than simple decimal,
such as binary with leading 0[bB],
octal with leading 0[oO] and hexadecimal with leading 0[xX].
.SH EXPRESSION SYNTAX
The syntax used by
.B mc
is listed below in order of precedence,
highest to lowest.
.SS Arithmetic and Bitwise operators
.PP
\-
.B \-
.I expression
.RS
Returns unary minus of
.IR expression .
.RE
.PP
\-
.B ~
.I expression
.RS
Returns the bitwise not of
.IR expression .
.RE
.PP
\-
.I expression
.B +
.I expression
.RS
Returns sum of both
.IR expression s.
.RE
.PP
\-
.I expression
.B \-
.I expression
.RS
Returns difference of both
.IR expression s.
.RE
.PP
\-
.I expression
.B *
.I expression
.RS
Returns product of both
.IR expression s.
.RE
.PP
\-
.I expression
.B /
.I expression
.RS
Returns division of both
.IR expression s.
.RE
.PP
\-
.I expression
.B %
.I expression
.RS
Returns remainder of the first
.I expression
divided by the second.
.RE
.PP
\-
.I expression
.B **
.I expression
.RS
Returns the first
.I expression
to the power of the second.
.RE
.PP
\-
.I expression
.B |
.I expression
.RS
Returns bitwise or of both
.IR expression s.
.RE
.PP
\-
.I expression
.B ^
.I expression
.RS
Returns bitwise exclusive-or of both
.IR expression s.
.RE
.PP
\-
.I expression
.B &
.I expression
.RS
Returns bitwise and of both
.IR expression s.
.RE
.PP
\-
.I expression
.B <<
.I expression
.RS
Returns left bitwise shift of the first
.I expression
by the second.
.RE
.PP
\-
.I expression
.B >>
.I expression
.RS
Returns right bitwise shift of the first
.I expression
by the second.
.RE
.SS Logical comparison operators
.PP
\-
.B not
.I expression
.RS
Returns the logical not of
.IR expression .
.RE
.PP
\-
.I expression
.B <
.I expression
.RS
Returns 1 if the first
.I expression
is less than the second,
otherwise returns 0.
.RE
.PP
\-
.I expression
.B >
.I expression
.RS
Returns 1 if the first
.I expression
is greater than the second,
otherwise returns 0.
.RE
.PP
\-
.I expression
.B <=
.I expression
.RS
Returns 1 if the first
.I expression
is less than or equal to the second,
otherwise returns 0.
.RE
.PP
\-
.I expression
.B >=
.I expression
.RS
Returns 1 if the first
.I expression
is greater than or equal to the second,
otherwise returns 0.
.RE
.PP
\-
.I expression
.B ==
.I expression
.RS
Returns 1 if the first
.I expression
is equal to the second,
otherwise returns 0.
.RE
.PP
\-
.I expression
.B !=
.I expression
.RS
Returns 1 if the first
.I expression
is not equal to the second,
otherwise returns 0.
.RE
.PP
\-
.I expression
.B or
.I expression
.RS
Returns 1 if either or both
.IR expression s
are true,
otherwise returns 0.
.RE
.PP
\-
.I expression
.B and
.I expression
.RS
Returns 1 if both
.IR expression s
are true,
otherwise returns 0.
.RE
.PP
\-
.I expression
.B if
.I expression
.B else
.I expression
.RS
Returns the first
.I expression
if the second
.I expression
is non zero,
otherwise returns the third
.IR expression .
.PP
Note that
.BR if-else 's
can only be nested if the
nested
.B if-else
is
parenthesized.
.RE
.SS Builtin functions
.PP
\-
.B sqrt
.B (
.I expression
.B )
.RS
Returns the
.IR square
root of
.IR expression.
.RE
.PP
\-
.B log (
.I expression
.B )
.RS
Returns log base 2 of
.IR expression .
.RE
.PP
\-
.B log10 (
.I expression
.B )
.RS
Returns log base 10 of
.IR expression .
.RE
